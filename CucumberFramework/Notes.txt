
Q1. What is automation Framework ? 


Q2. What is TestNG ?

Q3. What is Maven ?
- Build management Tool
- Creaet Cucumber or automation framework


Q4. What is the POM File ?
- XML File
- Contains info about the project
- Heart of Maven project
- List of all dependencies to download from the web to get project running
- Easily allows us the download project versions
- When you update the pom file, you will need to re-install the project using "maven install"

Q4b. What is dependency ?
- Tool that allows to manage all libraries in a logical way

Q5. What makes TestNG different from JUnit ?

6. What do you need to download before starting ?
- Java SDK
- Apache Maven
- Set up Environment variables for Windows  / Set up bash_profile for Mac
	> JAVA_HOME, M2 ..etc
- Download TestNG from Eclipse Marketplace
- Download Cucumber, Natural 0.9
- Download ChromeDriver 

7. How to create a maven project ? 
- Go Create new Project
- Go to "Other.."
- Go to Maven > Create Maven Project
- Use Default WorkStation Location > Next
- Select  GroupId:  org.apache.maven.archetypes with ArtifactId: maven-archetype-quickstart > Next
- GroupId: com.XYZ
- ArtifiactId: NameOfApp
- Package: NameOfApp (Remove com.XYZ)
- Click on Finish

8. You will need to download Chromedriver & ChromeBrowser

9. How to test if Maven Project is running correctly /
- Go to project
- Right click on project 
- Run As > Maven  Install
- If it works, you should see build succcessful

****10. How to update Project POM	
- Right click on the “ProjectName” 
- Click on Maven
- Update Project
- Click on the Checkbox with “Force Update of Snapshot/Releases’
- Click Ok

11. When you update the pom file, it downloads the jar files and places it in the .m2 folder

12. If you delete the "repository" folder in the .m2 folder, you can redownload all the jar files by doing the update using Q10. above


13. How to get install dependencies on pom ?
- Go to Maven Repository on web ... https://mvnrepository.com/
- Search for artifacts like Seleneium
- Select version
- Copy the Maven code into the pom file
- Update the Project POM

14. What is Gherkin ?
- Programming language Cucumber understands
- Business Readable / Domain Specific
- Describes softwares behaviour without detailing how behaviour is implemented


15. What is a feature file ? 
- Capturing Business requirements
- Contains Gherkin Keywords:
Feature
Scenario
Given
But
Then
And


16. What is Step definitions ?
- Java method with an expression that links it to a Gherkin Step

Ex: 
Scenario: Some cukes
  Given I have 48 cukes in my belly
  
- 'Given' is a Gherkin keyword, and "I have 48 cukes in my belly" will match the step definition of:
public class StepDefinitions {
    @Given("I have {int} cukes in my belly")
    public void i_have_n_cukes_in_my_belly(int cukes) {
        System.out.format("Cukes: %n\n", cukes);
    }
}



18. Flow is:
Feature Files > Step Definitions (Java Code) > Selenium > ChromeDriver > Chrome

19. How to create a feature file ?
- New > File > NameOfFeature.feature  (make sure to add.feature)

20. You are getting "Pending Exception" ? Remove it on the Steps definiition method

21. If you have Step definitions for each step and you run the feature file, you should see 
1 Scenarios (1 passed)
6 Steps (6 passed)
0m0.156s


22. What is Runner Class ?
- Can execute multiple feature files
- Can also generate customize reports
- Ability to generate method templates for our step classes

23. What is glue ? 
- Middle stage which connects feature files
- Location of Step Files


24. How to execute the runner class ?
- Right click on RunnerClass (ex. MainRunner.java)
- Run As

25. What is monochrome ?
monoChrome - Boolean: - Alters the output of the console window by making it readable or non readable

26. What are tags ?
tags - Target specific tests

27. What are plugins ?
plugin - Create and develop specific reports (Ex. Html, JSON or Extent report)

28. Why do we need the @RunWith(Cucumber.class) ?
- Mandatory for running Cucumber

 
28. What is dryRun ?
dryRun - Boolean: True - Check whether matching steps are visible but will NOT execute the code within the steps




29. What is firebug ? 
- Obsolete

30. What is firepath ?
- Obsolete

31. What is ranorex ? 
- Tool used to locate elements. 
- Allows us to copy the xpath to a particular element


32. What is gecko driver ?

33. What is a hook ?
- Before


34. Where is the report located ?
- target Folder
- report.html

35. You dont need Cucumber to run Selenium. I automated Selenium without cucumber in the MainNoCucumberRunner.java
- Run this as java application
- You should see Selenium running and inputting/outputting commands
Note: Downside ... there is NO reporting once completed



36. Definitions
Feature - Description of the feature file
Background - Defines common steps across multiple scenarios
	> Allows scenarios to run similar steps for each scenario (ex: Open Browser to the same site)
	> Reduces code duplication by running each scenario with the Background keyword
	> Used for Pre-Conditions

Scenario - A feature file can have multiple scenarios
		> Used to find our scenario amongst multiple scenarios
Given - Precondition of a scenario
When - Description of action which will be executed
Then - Specific outcome from executing the last step
And - Provides an additional condition to the step
But - Negative conditions from the last executed Step 

Scenario Outline - Enables data to be sent to scenarios using templates and examples
Examples - Used alongside Scenario outlines



37. You can create multiple scenarios inside a feature file
- You can also seperate scenarios into multiple feature files

38. Feature files need to have keyword: "Feature" at the top 


39. When setting the glue, you will need to change it to the name of the Package
Ex: 
@CucumberOptions(
		features = {"src/test/java/WebDriverU/Features/"},
		glue = {"WebDriverU.steps"},
		monochrome = true,
		tags = {}, 
		plugin = {"pretty", "html:target/cucumber", "html:target/cucumber.json", "com.cucumber.listener.ExtentCucumberFormatter:target/report.html"})
		
OR

@CucumberOptions(
		features = {"src/test/java/CucumberFramework/featureFiles/"},
		glue = {"CucumberFramework.steps"},
		monochrome = true,
		tags = {}, 
		plugin = {"pretty", "html:target/cucumber", "html:target/cucumber.json", "com.cucumber.listener.ExtentCucumberFormatter:target/report.html"})
		
40. The "Background" Only applies to the current feature file. Does NOT apply to othe featuer files

41. You can parameterize values in the step and it will appear as wild cards in the step definition
Ex: And I enter a "webdriver123" password		
This will show us:
@When("^I enter a \"([^\"]*)\" password$")
public void i_enter_a_password(String password) throws Throwable {
	driver.findElement(By.id("password")).sendKeys(password); 
}


		
42. Note: @Before runs before each Scenario. Hence if you have 5 scenarios in a Feature File,
Then @Before will run 5 times since there are 5 scenarios

43. Looks like creating more than one Step file is not a good idea. Better to make ONE master step file (ex: Steps.java)

44. How to toggle between different tabs ? 
String winHandlerBefore = driver.getWindowHandle()
for(String winHandler: driver.getWindowHandles()) {
			driver.switchTo().window(winHandler);
}


45. What are Data Tables ? 
- Allows user to define multiple data as a table on a given step
- The Step definition would have a "DataTable" object which can be map out the table
- Then the step definition can extract the data from the datatable using a
List<List<String>> data = comments.raw()


46. What is Scenario Outlines ? 
- Similar to a FOR LOOP
- Runs each step with predefined parameters
- Allows us to run test through each row of data
- Once row is executed, it runs through the second row until the end 
- In order to call, you will to be use "<xyz>" and this will refer to the column in the outline
- Minimizes code duplication and saves time by repeating the steps 
Note: This requires the use of "Examples:" 

Ex: 
Scenario Outline: Test Login to account with credentials using ScenarioOutlines
	Given user navigates to "<url>" 
	When user clicks on the login portal button
	And user enters the "<username>" username
	And user enter the "<password>" password
	When user clicks on the login button
	Then the user should be presented with the following prompt alert "<message>"
	
	
	Examples:
	| 	          url 					| 		username 		|		 password		 |		 message		 |
	|http://www.webdriveruniversity.com/|	webdriver3			|		wendriver 		 | validation failed     |
	|http://www.webdriveruniversity.com/|	webdriver			|		webdriver123	 | validation succeeded  |
	

47. What are hooks ?
- Blocks of code that can run at various points in Cucumber Life Cycle
- Typically used for setup and teardown of environment befor and after each scenario
- Enhance our test cases
- Can attach images to reports using Hooks
@Before - Gets executed for each scenario
@After - Gets executed after each scenario

Multiple types of Hooks
Scenario Hooks:
- @Before
- @After

Step Hooks:
- @BeforeStep
- @AfterStep

Conditional Hooks:
- @After("@browser and not @headless")
public void doSomethingAfter(Scenario scenario){
}


48. What are Cucumber Options ? 
- Mandatory to have  "@RunWith(XYZ_NameOfClass.class)
- Settings for the Runner Class

Ex: 
@CucumberOptions(
		features = {"src/test/java/WebDriverU/Features/Login.feature"},				// Location of feature Files
		glue = {"WebDriverU.steps"},											Í	// Glue - Steo Definitions
		monochrome = true,
		tags = {}, 
		plugin = {"pretty", "html:target/cucumber", "html:target/cucumber.json", "com.cucumber.listener.ExtentCucumberFormatter:target/report.html"})

Note:
features - Location of feature files
glue - Location of Step Files
tags - Target specific tests
> Filters only the test we want to run ... aka we tag only the scenarios we want to run

dryRun - Boolean: True - Check whether matching steps are visible but will NOT execute the code within the steps
monoChrome - Boolean: - Alters the output of the console window by making it readable or non readable
plugin - Create and develop specific reports (Ex. Html, JSON or Extent report)




